#!/usr/bin/env node

/**
 * Module dependencies.
 */
const init = require('../modules/init');
const log = require('../modules/log');
const app = require('../app');
const config = require('config');
const protocol = require(config.https ? 'https' : 'http');
const fs = require('fs');

const options = {
    key: fs.readFileSync('./certificate/key.pem'),
    cert: fs.readFileSync('./certificate/certificate.pem')
};

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(config.port);
app.set('port', port);

/**
 * Create HTTP or HTTPS  server.
 */

let server = config.https
    ? protocol.createServer(options, app)
    : protocol.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP or HTTPS server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        log(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        log(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
}

/**
 * Event listener for server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    log('Listening on ' + bind);
}
